// Generated by Dagger (https://dagger.dev).
package com.romm.android.di;

import android.content.Context;
import androidx.work.WorkManager;
import com.romm.android.network.RomMApiService;
import com.romm.android.utils.DownloadManager;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata("dagger.hilt.android.qualifiers.ApplicationContext")
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava"
})
public final class AppModule_ProvideDownloadManagerFactory implements Factory<DownloadManager> {
  private final Provider<Context> contextProvider;

  private final Provider<RomMApiService> apiServiceProvider;

  private final Provider<WorkManager> workManagerProvider;

  public AppModule_ProvideDownloadManagerFactory(Provider<Context> contextProvider,
      Provider<RomMApiService> apiServiceProvider, Provider<WorkManager> workManagerProvider) {
    this.contextProvider = contextProvider;
    this.apiServiceProvider = apiServiceProvider;
    this.workManagerProvider = workManagerProvider;
  }

  @Override
  public DownloadManager get() {
    return provideDownloadManager(contextProvider.get(), apiServiceProvider.get(), workManagerProvider.get());
  }

  public static AppModule_ProvideDownloadManagerFactory create(Provider<Context> contextProvider,
      Provider<RomMApiService> apiServiceProvider, Provider<WorkManager> workManagerProvider) {
    return new AppModule_ProvideDownloadManagerFactory(contextProvider, apiServiceProvider, workManagerProvider);
  }

  public static DownloadManager provideDownloadManager(Context context, RomMApiService apiService,
      WorkManager workManager) {
    return Preconditions.checkNotNullFromProvides(AppModule.INSTANCE.provideDownloadManager(context, apiService, workManager));
  }
}
